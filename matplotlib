// Python numpy import using arry
import numpy as np
In [2]:
ls=[2,3,4,5,6,7]
ar=np.array(ls)
ar
Out[2]:
array([2, 3, 4, 5, 6, 7])
In [3]:
ar.reshape(3,2)
Out[3]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [4]:
ar.reshape(2,3)
Out[4]:
array([[2, 3, 4],
       [5, 6, 7]])
In [6]:
ar.shape=(3,2)
ar
Out[6]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [8]:
print(np.sum(ar)) #grand total
print(np.sum(ar,0)) #columns  wise
print(np.sum(ar,1)) #row wise
27
[12 15]
[ 5  9 13]
In [9]:
print(np.max(ar)) #grand total
print(np.max(ar,0)) #columns  wise
print(np.max(ar,1))#row wise
7
[6 7]
[3 5 7]
In [10]:
np.where(ar>5) #return the index of match values
Out[10]:
(array([2, 2], dtype=int64), array([0, 1], dtype=int64))
In [17]:
ar[np.where(ar>5)]
Out[17]:
array([6, 7])
In [14]:
ar1=np.array([13,14,12,15,16,17])
ar1
Out[14]:
array([13, 14, 12, 15, 16, 17])
In [16]:
np.where(ar1>14) #return the index of match values
Out[16]:
(array([3, 4, 5], dtype=int64),)
In [18]:
ar1[np.where(ar1>14)]
Out[18]:
array([15, 16, 17])
In [19]:
np.extract(ar1>14, ar1) #return the value of match values
Out[19]:
array([15, 16, 17])
In [20]:
np.argmax(ar1)
Out[20]:
5
In [21]:
ar1
Out[21]:
array([13, 14, 12, 15, 16, 17])
In [22]:
np.argmax(ar) #all arg prefixed method return the index position
Out[22]:
5
In [23]:
ar
Out[23]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [24]:
np.argmax(ar,0)
Out[24]:
array([2, 2], dtype=int64)
In [25]:
np.argmax(ar,1)
Out[25]:
array([1, 1, 1], dtype=int64)
In [26]:
ar
Out[26]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [27]:
#broadcasting rule
#1 doing calculation with scalar value
ar+10
Out[27]:
array([[12, 13],
       [14, 15],
       [16, 17]])
In [28]:
#2 doing calculation with same columns count values
ar+[10,20]
Out[28]:
array([[12, 23],
       [14, 25],
       [16, 27]])
In [29]:
#3 doing calculation with same row count values
ar+[[10],[20],[30]]
Out[29]:
array([[12, 13],
       [24, 25],
       [36, 37]])
In [30]:
#4 doing calculation with same dimension data
ar+[[10,20],[30,40],[50,60]]
Out[30]:
array([[12, 23],
       [34, 45],
       [56, 67]])
       
       ar1
Out[33]:
array([13, 14, 12, 15, 16, 17])
In [34]:
np.append(ar1,99)
Out[34]:
array([13, 14, 12, 15, 16, 17, 99])
In [35]:
np.insert(ar1,2,88)
Out[35]:
array([13, 14, 88, 12, 15, 16, 17])
In [36]:
np.delete(ar1,2)
Out[36]:
array([13, 14, 15, 16, 17])
In [37]:
ar
Out[37]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [41]:
np.append(ar,[[10,20]],0)
Out[41]:
array([[ 2,  3],
       [ 4,  5],
       [ 6,  7],
       [10, 20]])
In [42]:
np.append(ar,[[10],[20],[30]],1)
Out[42]:
array([[ 2,  3, 10],
       [ 4,  5, 20],
       [ 6,  7, 30]])
In [48]:
np.insert(ar,1,[10,20],axis=0)
Out[48]:
array([[ 2,  3],
       [10, 20],
       [ 4,  5],
       [ 6,  7]])
In [49]:
np.insert(ar,1,[10,20,30],axis=1)
Out[49]:
array([[ 2, 10,  3],
       [ 4, 20,  5],
       [ 6, 30,  7]])
In [50]:
np.delete(ar,1,0) #colum wise deletion
Out[50]:
array([[2, 3],
       [6, 7]])
In [51]:
ar
Out[51]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [52]:
np.delete(ar,1,1) #colum wise deletion
Out[52]:
array([[2],
       [4],
       [6]])
In [53]:
ar
Out[53]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [55]:
np.save("d:/test.npy",ar)
In [60]:
ar2=np.load("d:/test.npy")
ar2
Out[60]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [57]:
np.savetxt("d:/test1.txt",ar)
In [58]:
ar2=np.loadtxt("d:/test1.txt")
ar2
Out[58]:
array([[2., 3.],
       [4., 5.],
       [6., 7.]])
In [59]:
ar=np.genfromtxt("wine_sample.csv",delimiter=",")
ar
Out[59]:
array([[ 7.,  1.,  0.,  2.,  0., 11., 34.,  1.,  4.,  1.,  9.,  5.],
       [ 8.,  1.,  0.,  3.,  0., 25., 67.,  1.,  3.,  1., 10.,  5.],
       [ 8.,  1.,  0.,  2.,  0., 15., 54.,  1.,  3.,  1., 10.,  5.],
       [11.,  0.,  1.,  2.,  0., 17., 60.,  1.,  3.,  1., 10.,  6.],
       [ 7.,  1.,  0.,  2.,  0., 11., 34.,  1.,  4.,  1.,  9.,  5.]])
In [61]:
ar2
Out[61]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [62]:
24*60
Out[62]:
1440
In [67]:
ls=[]
for i in range(0,1440):
    ls.append(np.random.randint(1,10))
In [66]:
np.random.randint(1,10)
Out[66]:
4
In [68]:
len(ls)
Out[68]:
1440
In [69]:
ls[:10]
Out[69]:
[1, 6, 5, 7, 6, 3, 8, 4, 2, 9]
In [70]:
ar_main=np.array(ls)
In [71]:
ar_main
Out[71]:
array([1, 6, 5, ..., 6, 5, 8])
In [72]:
#hourly analysis
ar_hours=ar_main.reshape(24,60)
In [73]:
ar_hours
Out[73]:
array([[1, 6, 5, ..., 4, 6, 7],
       [2, 3, 5, ..., 6, 4, 8],
       [3, 3, 5, ..., 4, 1, 8],
       ...,
       [3, 3, 9, ..., 7, 7, 9],
       [5, 9, 9, ..., 7, 6, 1],
       [3, 4, 8, ..., 6, 5, 8]])
In [74]:
np.mean(ar_hours,1)
Out[74]:
array([4.86666667, 5.1       , 4.85      , 4.66666667, 4.6       ,
       5.2       , 4.91666667, 5.13333333, 4.33333333, 4.7       ,
       4.81666667, 4.9       , 5.36666667, 4.98333333, 4.93333333,
       4.93333333, 5.46666667, 5.15      , 5.15      , 5.21666667,
       4.81666667, 5.75      , 5.18333333, 4.7       ])
In [80]:
print("Critical Hours is ", np.argmax(np.mean(ar_hours,1))+1)
Critical Hours is  22


//visulization analysis result & import matplotlib

import matplotlib.pyplot as plt
In [79]:
plt.plot(range(24),np.mean(ar_hours,1))
plt.show()

In [84]:
ar_shift=ar_main.reshape(3,480)
In [85]:
ar_shift.shape
Out[85]:
(3, 480)
In [86]:
ar_shift
Out[86]:
array([[1, 6, 5, ..., 1, 8, 6],
       [4, 3, 1, ..., 7, 2, 5],
       [2, 2, 7, ..., 6, 5, 8]])
In [87]:
np.mean(ar_shift,1)
Out[87]:
array([4.91666667, 4.87083333, 5.17916667])
In [88]:
np.argmax(np.mean(ar_shift,1))
Out[88]:
2
In [89]:
print("Critical Shift is ",np.argmax(np.mean(ar_shift,1))+1)
Critical Shift is  3
In [90]:
ar
Out[90]:
array([[ 7.,  1.,  0.,  2.,  0., 11., 34.,  1.,  4.,  1.,  9.,  5.],
       [ 8.,  1.,  0.,  3.,  0., 25., 67.,  1.,  3.,  1., 10.,  5.],
       [ 8.,  1.,  0.,  2.,  0., 15., 54.,  1.,  3.,  1., 10.,  5.],
       [11.,  0.,  1.,  2.,  0., 17., 60.,  1.,  3.,  1., 10.,  6.],
       [ 7.,  1.,  0.,  2.,  0., 11., 34.,  1.,  4.,  1.,  9.,  5.]])
In [91]:
ar2
Out[91]:
array([[2, 3],
       [4, 5],
       [6, 7]])
In [92]:
ar1
Out[92]:
array([13, 14, 12, 15, 16, 17])
In [93]:
np.sort(ar1)
Out[93]:
array([12, 13, 14, 15, 16, 17])
In [94]:
np.argsort(ar1)
Out[94]:
array([2, 0, 1, 3, 4, 5], dtype=int64)
In [95]:
np.arange(10)
Out[95]:
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
In [96]:
np.arange(2,10)
Out[96]:
array([2, 3, 4, 5, 6, 7, 8, 9])
In [97]:
np.arange(2,10,2)
Out[97]:
array([2, 4, 6, 8])
In [98]:
list(range(10))
Out[98]:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
In [100]:
import time

size_of_vec = 1000000

def pure_python_version():
    t1 = time.time()
    X = range(size_of_vec)
    Y = range(size_of_vec)
    Z = [X[i] + Y[i] for i in range(len(X)) ]
    return time.time() - t1

def numpy_version():
    t1 = time.time()
    X = np.arange(size_of_vec)
    Y = np.arange(size_of_vec)
    Z = X + Y
    return time.time() - t1


t1 = pure_python_version()
t2 = numpy_version()
print("Time Taken by Core Python Mode Ops :", t1)
print("Time Taken by Core Numpy Mode Ops :", t2)
Time Taken by Core Python Mode Ops : 0.5632679462432861
Time Taken by Core Numpy Mode Ops : 0.006026744842529297
